{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Scripts\\Common/assets\\Scripts\\Common\\ResourcesMgr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Scripts\\Common","sourcesContent":["import Global from \"./Global\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport enum ResourceIndex\r\n{\r\n    Lobby,\r\n    BAG,\r\n    LB, //LeaderBoard\r\n    \r\n\r\n    HistoryController = 100,\r\n}\r\n\r\n@ccclass\r\nexport default class ResourcesMgr extends cc.Component {\r\n\r\n    private spriteFrame = {};\r\n    private assetList = {};\r\n\r\n    private loadingList:[string, any][] = [];\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        Global.Instance.resources = this;\r\n        // ResourceIndex.Lobby\r\n        let list = [];\r\n        list.push(\"faces\");\r\n        list.push(\"icons\");\r\n        list.push(\"share\");\r\n        list.push(\"BC\");\r\n        list.push(\"gameRoom\");\r\n        this.assetList[ResourceIndex.Lobby] = list;\r\n\r\n        // ResourceIndex.BAG\r\n        list = [];\r\n        list.push(\"faces\");\r\n        list.push(\"icons\");\r\n        list.push(\"share\");\r\n        list.push(\"BC\");\r\n        list.push(\"gameRoom\");\r\n        this.assetList[ResourceIndex.BAG] = list;\r\n    }\r\n\r\n    preloadSprits(idx: ResourceIndex, onLoading=null)\r\n    {\r\n        cc.log(\"ResourcesMgr.preload(\" + idx + \")\");\r\n\r\n        let assetListComplete = 0;\r\n        let assetList: [string] = this.assetList[idx.toString()];\r\n        for (let i = 0; i < assetList.length; i++)\r\n        {\r\n            cc.loader.loadResDir(\"textures/\" + assetList[i], cc.SpriteFrame,\r\n            (completedCount, totalCount, item) => {}, \r\n            (err, assets) =>\r\n            {\r\n                for (let i = 0; i < assets.length; i++)\r\n                {\r\n                    //cc.log(\"check \" + assets[i].name);   \r\n                    if (this.spriteFrame[assets[i].name] == null)\r\n                    {\r\n                        this.spriteFrame[assets[i].name] = assets[i];\r\n                        //cc.log(\"[[Resources]] \" + assets[i].name + \" loaded.\");        \r\n                    }\r\n                }\r\n                \r\n                assetListComplete++;\r\n                if (onLoading != null)\r\n                    onLoading(assetListComplete / assetList.length);\r\n            });\r\n        }\r\n    }\r\n\r\n    releaseSprits(idx: ResourceIndex)\r\n    {\r\n        cc.log(\"ResourcesMgr.releaseRes(\" + idx + \")\");\r\n\r\n        let assetListComplete = 0;\r\n        let assetList: [string] = this.assetList[idx.toString()];\r\n        for (let i = 0; i < assetList.length; i++)\r\n        {\r\n            cc.loader.release(\"textures/\" + assetList[i]);\r\n        }\r\n    }\r\n\r\n    getloadAssets(_name: string, _callback:Function = null) : Promise<any>\r\n    {\r\n        let isLoad = this.loadingList.find( x => x[0] === _name);\r\n        let self = this;\r\n        return new Promise( function (resolve, reject) {\r\n            if(isLoad == null)      \r\n            {                \r\n                cc.loader.loadRes(_name, function (err, prefab) {\r\n                    if(err)\r\n                    {\r\n                        cc.error(err);\r\n                        reject(err);\r\n                    }\r\n                    self.loadingList.push([_name, prefab]);  \r\n                    cc.log('Load : '+ _name);\r\n                    resolve(prefab);             \r\n                });                \r\n            }\r\n            else\r\n            {\r\n                resolve(isLoad[1]);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}\r\n"]}