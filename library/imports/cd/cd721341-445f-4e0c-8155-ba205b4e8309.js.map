{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Scripts\\Common/assets\\Scripts\\Common\\EventListener.ts"],"names":[],"mappings":";;;;;AAAA;IAII;QAEI,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACzB,CAAC;IAED,sBAAI,iCAAM;aAAV,cAAc,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAA,CAAA,CAAC;;;OAAA;IAE5C,0BAAE,GAAF,UAAG,IAAQ,EAAE,aAAsB;QAG/B,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,IAAI,aAAa,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,EAA1C,CAA0C,CAAC,CAAC;QAEpF,IAAG,KAAK,EAAC;YACL,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAClC,OAAO;SACV;QAED,IAAI,GAAG,GAAG,EAAC,IAAI,EAAC,aAAa,EAAE,KAAK,EAAC,IAAI,EAAC,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,2BAAG,GAAH,UAAI,IAAQ,EAAE,aAAsB;QAGhC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,CAAC;YAExC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,IAAE,aAAa,IAAI,CAAC,CAAC,KAAK,IAAE,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8BAAM,GAAN;QAAO,cAAa;aAAb,UAAa,EAAb,qBAAa,EAAb,IAAa;YAAb,yBAAa;;QAChB,IAAI,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAE,CAAC;QACtE,YAAY,CAAC,GAAG,CAAC,UAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,eAAI,IAAI,EAAC,CAAA,CAAC,CAAC,CAAA;IAC1D,CAAC;IAED,6BAAK,GAAL;QAGI,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACzB,CAAC;IACL,oBAAC;AAAD,CA5CA,AA4CC,IAAA","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Scripts\\Common","sourcesContent":["export default class EventListener {\r\n\r\n    private _callbacks:any[];\r\n    \r\n    constructor() \r\n    {    \r\n        this._callbacks = [];\r\n    }\r\n    \r\n    get length() {return this._callbacks.length}\r\n    \r\n    on(self:any, callback_func:Function) \r\n    {\r\n    \r\n        let check = this._callbacks.find((x) => x.func == callback_func && x.owner == self);\r\n        \r\n        if(check){    \r\n            console.log('Bind Event Error!!');\r\n            return;\r\n        }\r\n\r\n        let obj = {func:callback_func, owner:self};\r\n        this._callbacks.push(obj);\r\n    }\r\n    \r\n    off(self:any, callback_func:Function) \r\n    {\r\n    \r\n        this._callbacks = this._callbacks.filter( (x)=> {\r\n        \r\n            return !(x.func==callback_func && x.owner==self);\r\n        });\r\n    }\r\n    \r\n    notify(...args:any[]):any{    \r\n        let tmp_callback = this._callbacks.filter( x => x.owner === args[0] );\r\n        tmp_callback.map((x)=>{x.func.bind(x.owner)(...args)})\r\n    }\r\n    \r\n    clear()\r\n    {\r\n    \r\n        this._callbacks = [];\r\n    }\r\n}\r\n"]}